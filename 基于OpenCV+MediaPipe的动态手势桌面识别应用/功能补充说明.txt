手势切换页面时摄像头开关：
在上面的代码中，我们添加了`hideEvent`方法来关闭摄像头。当页面隐藏时（切换到其他页面），它会停止定时器并释放摄像头资源。
这样，当你切换到其他页面时，`GesturePage`页面会自动关闭摄像头，以避免不必要的资源占用。当再次切换回`GesturePage`页面时，它会重新打开摄像头并开始处理图像。记得根据你的实际需求进行适当的调整。


主窗口控件传递给GesturePage类===============================================================
我们在`GesturePage`类的构造函数中添加了一个名为`controls`的参数，用于接收一个字典，其中包含了所有需要传递的控件。

然后，我们将整个字典存储在`self.controls`属性中，并根据控件的名称从字典中获取相应的控件对象。例如，`self.controls['comboBox_101']`表示主窗口中名为`comboBox_101`的控件对象。

最后，我们可以使用`self.controls['comboBox_101'].currentText()`和`self.controls['comboBox_102'].currentText()`来获取这些控件的当前文本值。

在主窗口中实例化`GesturePage`类时，需要将包含所有需要传递的控件的字典作为参数传递给`GesturePage`类。


控制粘贴功能频率==============================================================================
我们添加了一个名为 `last_paste_time` 的实例变量，用于跟踪上一次粘贴操作的时间。在 `test_hands` 方法中，我们获取当前时间，并计算与上一次粘贴操作的时间差 `time_diff`。如果时间差大于等于 5 秒（可以根据需要调整时间间隔），则调用 `fun_paste` 方法执行粘贴操作，并更新 `last_paste_time` 为当前时间。

通过这种方式，即使 `test_hands` 方法在循环中频繁执行，也可以通过限制时间间隔来避免过快地多次调用粘贴操作。



